<!DOCTYPE html>
<html lang="en">
<head>
    <title>{{ name }}</title>
    <link rel="stylesheet" href="/static/css/bootstrap.min.css"/>
    <script src="/static/dist/js/bootstrap.min.js"></script>
    <script src="//d3js.org/d3.v3.min.js"></script>
    <style>
        body { padding-top: 70px;}
    </style>
    <style>

        .node circle {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        .node {
            font: 14px sans-serif;
            font-weight: bold;
        }

        .link {
            fill: none;
            stroke: #000000;
            stroke-width: 1.5px;
        }

    </style>

</head>
<body>
<nav class="navbar navbar-default navbar-fixed-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar"
                    aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">Pinyon</a>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li><a href="/">Home</a></li>
                <li><a href="/toolchain/{{ name }}/view">{{ name }}</a></li>
            </ul>
        </div><!--/.nav-collapse -->
    </div>
</nav>
<div class="container">

    <h1>{{ name }}</h1>

    <p>{{ toolchain.description }}</p>

    <p>
        <a class="btn btn-primary" role="button" href="/toolchain/{{ name }}/run"
           data-toggle="tooltip" data-placement="top" title="Re-run the entire toolchain. Will also run any other chains
                that use the same extractor">
            Run Tool
        </a>
    </p>

    <p>
    <table class="table">
        <tr>
            <th>Name</th>
            <td>{{ toolchain.name }}</td>
        </tr>
        <tr>
            <th>Type</th>
            <td>{{ toolchain.__class__.__name__ }}</td>
        </tr>
    </table>
    </p>

    <h2>Extractor</h2>

    <p>Tool used to get raw data from an information source.</p>

    <p>
        <a href="/extractor/{{ toolchain.extractor.name }}/view">{{ toolchain.extractor.name }}</a>:
        {{ toolchain.extractor.description | safe }}
    </p>

    <h2>Workflow</h2>

    <p>List of tools currently used to transform and analyze the data</p>

    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Last Run</th>
        </tr>
        </thead>
        <tbody>
        {% for tool in toolchain.get_all_tools() %}
            <tr>
                <td><a href="/tool/{{ tool.id }}/view">{{ tool.name }}</td>
                <td>{{ tool.__class__.__name__ }}</td>
                <td>{{ tool.last_run }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <a class="btn btn-primary" role="button" href="/tool/create/{{ toolchain.name }}">Create New</a>

    <h3>Network View</h3>

    <p>Show the interrelation and between data analysis tools, starting from the extraction from the database.</p>

    <div id="network-output"/>
</div>
</body>

<script>
    var width = 1024,
            height = {{ stats['depth'] * 80 }};

    var tree = d3.layout.tree()
            .size([width, height - 64]);

    var diagonal = d3.svg.diagonal()
            .projection(function (d) {
                return [d.x, d.y];
            });

    var svg = d3.select("#network-output").append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(0,32)");

    d3.json('/toolchain/{{ name }}/network', function (error, json) {
        if (error) throw error;

        var nodes = tree.nodes(json),
                links = tree.links(nodes);

        var link = svg.selectAll("path.link")
                .data(links)
                .enter().append("path")
                .attr("class", "link")
                .attr("d", diagonal);

        var node = svg.selectAll("g.node")
                .data(nodes)
                .enter().append("g")
                .attr("class", "node")
                .attr("z", 1)
                .attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                });

        node.append("circle")
                .attr("r", 20);

        var text_boxes = node.append("text")
                .attr("dy", 0)
                .attr("dx", -10)
                .text(function (d) {
                    return d.name;
                });

        node.data(nodes)
                .on("click", function(d) {
                    if (d.class_hierarchy.startsWith("BaseExtractor")) {
                        window.location.href = '/extractor/' + d.name + '/view';
                    } else {
                        window.location.href = '/tool/' + d.id + '/view';
                    }
                });
    });

</script>

</html>